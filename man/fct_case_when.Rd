% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_case_when.R
\name{fct_case_when}
\alias{fct_case_when}
\title{Factor case_when}
\usage{
fct_case_when(..., label = NULL)
}
\arguments{
\item{...}{A sequence of two-sided formulas consistent with \code{dplyr::case_when}.}

\item{label}{A character. It's the label of the created value.}
}
\value{
The output of \code{dplyr::case_when}, as class \code{"factor"} and ordered
however you wanted it.
}
\description{
Wrapper around \code{dplyr::case_when} that converts the output to a factor and
preserves the order in which value labels were passed into the function.
}
\details{
Unlike case_when, fct_case_when allows factors to be passed in as
right-hand-side arguments - they are treated internally as characters, but the
resulting vector will preserve the order of the original factor levels.
}
\examples{
library(dplyr)
partysum <- with(dec13_excerpt, fct_case_when(party == "Republican" ~ "Rep/Lean Rep",
                          party == "Democrat"  ~ "Dem/Lean Dem",
                          partyln == "Republican" ~ "Rep/Lean Rep",
                          partyln == "Democrat" ~ "Dem/Lean Dem",
                          TRUE ~ partyln)
                          )

# Compare to normal case_when() and then factor(), which will arrange the levels in
# unwanted alphabetical order

partysum <- with(dec13_excerpt, factor(case_when(party == "Republican" ~ "Rep/Lean Rep",
                             party == "Democrat"  ~ "Dem/Lean Dem",
                             partyln == "Republican" ~ "Rep/Lean Rep",
                             partyln == "Democrat" ~ "Dem/Lean Dem",
                             TRUE ~ as.character(partyln))))

}
\author{
pewmethods
}
